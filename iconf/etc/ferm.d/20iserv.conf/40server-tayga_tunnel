@def $NAT64IPv4Range = `bash -c '. /usr/lib/iserv/cfg; echo "$NAT64IPv4Range"'`;

@def &nat64() = {
  @if ($NAT64IPv4Range) {
   saddr @ipfilter($NAT64IPv4Range) ACCEPT;
  }
}

domain (ip) {
  table filter {
    chain forward_first {
      @if ($NAT64IPv4Range) {
        saddr @ipfilter($NAT64IPv4Range) daddr @ipfilter($LAN) proto tcp REJECT reject-with tcp-reset;
        saddr @ipfilter($NAT64IPv4Range) daddr @ipfilter($LAN) REJECT;
      }
    }
    chain forward_white {
      &nat64();
    }
  }

  table nat {
    chain prerouting_first {
      &nat64();
    }
  }
}

@def $NAT64Ipv6TunnelAddress = `bash -c '. /usr/lib/iserv/cfg; echo "$NAT64IPv6TunnelAddress"'`;
@def $NAT64Ipv6LocalAddress = `bash -c '. /usr/lib/iserv/cfg; echo "$NAT64IPv6LocalAddress"'`;

@def &allow_nat64($table, $chain) = {
  @if ($NAT64Ipv6TunnelAddress) {
    table $table chain $chain saddr @ipfilter($NAT64Ipv6TunnelAddress) ACCEPT;
    table $table chain $chain daddr @ipfilter($NAT64Ipv6TunnelAddress) ACCEPT;
  }

  @if ($NAT64Ipv6LocalAddress) {
    table $table chain $chain saddr @ipfilter($NAT64Ipv6LocalAddress) ACCEPT;
    table $table chain $chain daddr @ipfilter($NAT64Ipv6LocalAddress) ACCEPT;
  }
}

domain(ip6) {
  table filter {
    chain nat64_in {
      # do not accept invalid packets from NAT64
      mod conntrack ctstate INVALID DROP;
      jump inet_in;
    }
    chain nat64_out {
      # do not accept invalid packets from NAT64
      mod conntrack ctstate INVALID DROP;
      jump inet_out;

    }
    chain FORWARD {
      @if ($NAT64Range) {
        saddr @ipfilter($NAT64Range) jump nat64_in;
        daddr @ipfilter($NAT64Range) jump nat64_out;
      }
    }
  }

  &allow_nat64("filter", "FORWARD"); 
  &allow_nat64("nat", "prerouting_first");

  table nat {
    chain POSTROUTING {
      # SNAT before sending data to NAT64 bridge to prevent exhausting of NAT64
      # range (all data is sent with the host IP to Tayga).
      outerface nat64 jump MASQUERADE;
    }
  }
}

